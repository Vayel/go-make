import sys
import json


MIN_N_SLAVES = 14  # Le sujet dit: "Les tests devront être réalisés sur un minimum de 15 machines"
MACHINES_PATH = 'machines.json'
MEASURES_PATH = 'measures.json'

def help():
    print('python3 test.py max_n_slaves n_slaves_step n_reps')
    print('Examples:')
    print('\tpython3 test.py 29 5 5')


def get_nodes():
    # TODO: read and parse $OAR_FILE_NODES
    # Make sure to remove duplicates
    return []


def configure_machines(addrs):
    # TODO: install Go and pull code
    pass

def compile_master(addr):
    # TODO
    pass


def compile_slaves(addrs):
    # TODO
    pass


def compile_sequential(addr):
    # TODO
    pass


def get_machine_infos(node):
    return {
        'linux': None, # TODO
        'kernel': None, # TODO
        'compiler': None, # TODO
    }


def save_machines(nodes):
    machines = {}

    for node in nodes:
        machines[node] = get_machine_infos(node)

    with open(MACHINES_PATH, 'w') as f:
        json.dump(machines, f)


def run_seq(node):
    # TODO
    # Run ./bin/sequential and return the execution time
    return None


def measure_sequential(node, n_reps):
    return {
        'machine': node,
        'measures': [run_seq(node) for _ in range(n_reps)]
    }


def get_master_measures(node):
    # TODO
    # SSH on node and parse the file generated by Maxime
    return 5.3 # TODO


def get_slave_measures(node):
    # TODO
    # SSH on node and parse the file generated by Maxime
    return { # in the same order than the function param slaves
        'total': 3.3, # TODO
        'working': 2.1, # TODO
        'waiting': 0.8, # TODO
    }


def run_para(master, slaves):
    # Execute the program
    # TODO

    # Once it is finished
    return {
        'master': get_master_measures(master),
        'slaves': [get_slave_measures(slave) for slave in slaves]
    }


if __name__ == '__main__':
    MAX_N_SLAVES = int(sys.argv[1])
    assert MAX_N_SLAVES >= MIN_N_SLAVES
    N_SLAVES_STEP = int(sys.argv[2])
    assert N_SLAVES_STEP > 0
    N_REPS = int(sys.argv[3])
    assert N_REPS > 1

    nodes = get_nodes()
    master = nodes[0]
    slaves = nodes[1:]
    assert len(nodes) == MAX_N_SLAVES + 1

    compile_slaves(slaves)
    compile_master(master)
    compile_sequential(master)

    save_machines(nodes)

    measures = {0: measure_sequential(master, N_REPS)}

    for n_slaves in range(MIN_N_SLAVES, MAX_N_SLAVES + 1, N_SLAVES_STEP):
        measures[n_slaves] = {
            'master': master,
            'slaves': slaves[:n_slaves],
            'measures': [run_para(master, slaves[:n_slaves]) for _ in range(N_REPS)]
        }

    with open(MEASURES_PATH, 'w') as f:
        json.dump(measures, f)
